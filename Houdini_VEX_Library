//multiplying vector value 

v@v *= chf("vel_mult");

//make particles disappear as the time passes including the alpha value

@pscale = chf("ParticleScale") * (1 - @nage); // scale
@Cd = set(1, 1, 1) * (1 - @nage); // alpha
@Alpha = 1 - @nage; // alpha

// remove points based on the parameter range

if (@pscale < chf("minVal")) removepoint(0,@ptnum);
if (@pscale > chf("maxVal")) removepoint(0,@ptnum);

//Particle scale decaes as the time moves

@pscale = clamp(chf("ParticleScale") * (1 - @nage), 0, 1); // scale
@Cd = set(1, 1, 1) * (1 - @nage); // alpha

//frustum culling which allows to remove all points that is not in the area where the camera can see

string camera = chs("../camera");
vector campos = toNDC(camera, @P);

vector2 padding = chu("../padding");

if ((campos.x + padding.x) <0 || (campos.x - padding.x) >1 || (campos.y + padding.y) <0 || (campos.y - padding.y))
    i@group_kill = 1;

matrix cam = optransform(camera);

vector camera_position = cracktransform(0, 0, 0, {0, 0, 0}, cam);

float distance = distance(camera_position, @P);

float threshold = ch("../distance");
if(distance > threshold)
    i@group_kill = 1;
